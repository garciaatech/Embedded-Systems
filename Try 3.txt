----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    19:00:01 07/19/2019 
-- Design Name: 
-- Module Name:    xmas - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity xmas is
Port (clk : in  STD_LOGIC;
	   reset : in  STD_LOGIC;
	   l1 : out  STD_LOGIC;
	   l2 : out  STD_LOGIC;
	   l3 : out  STD_LOGIC;
	   l4 : out  STD_LOGIC;
	   s1 : in  STD_LOGIC;
		s2 : in STD_LOGIC;
		s3 : in STD_LOGIC;
		led : out STD_LOGIC);
end xmas;

architecture Behavioral of xmas is
type statetype is (initial, li1, li2, li3, li4, lig1, lig2, lig3, lig4, allon);
signal state, nextstate: statetype;
signal count_1s, t: unsigned(23 downto 0);
signal bT_1s: STD_LOGIC;

begin
t <= "000000000000000000000000";

reg: process (clk) is

begin
	if rising_edge(clk) then
		count_1s <= count_1s + 1;
		
		if count_1s > 600000 then -- one second period
			if bT_1s = '0' then
				bT_1s <= '1';
				led <= bT_1s;
			else
				bT_1s <= '0';
				led <= bT_1s;
			end if;
			count_1s <= t;
		end if;
	end if;
end process reg;

--state register
regs: process(bT_1s, reset)
begin
if (reset = '0') then 
	state <= initial;

elsif (rising_edge(bT_1s)) then
	state <= nextstate;
end if;
end process;

comlogic: process (state, s1, s2, s3)

begin
case state is

when initial =>
	if (s1 = '0') then 
		nextstate <= li1;
	elsif (s2 = '0') then
		nextstate <= lig4;
	elsif (s3 = '0') then
		nextstate <= allon;
	end if;


when li1 =>
l1 <= '1';
l2 <= '0';
l3 <= '0';
l4 <= '0';
	nextstate <= li2;

when li2 =>
l1 <= '0';
l2 <= '1';
l3 <= '0';
l4 <= '0';
	nextstate <= li3;

when li3 =>
l1 <= '0';
l2 <= '0';
l3 <= '1';
l4 <= '0';
	nextstate <= li4;

when li4 =>
l1 <= '0';
l2 <= '0';
l3 <= '0';
l4 <= '1';
	nextstate <= li1;


when lig1 =>
l1 <= '1';
l2 <= '0';
l3 <= '0';
l4 <= '0';
	nextstate <= lig4;

when lig2 =>
l1 <= '0';
l2 <= '1';
l3 <= '0';
l4 <= '0';
	nextstate <= lig1;

when lig3 =>
l1 <= '0';
l2 <= '0';
l3 <= '1';
l4 <= '0';
	nextstate <= lig2;

when lig4 =>
l1 <= '0';
l2 <= '0';
l3 <= '0';
l4 <= '1';
	nextstate <= lig3;
	

	
when allon =>
l1 <= '1';
l2 <= '1';
l3 <= '1';
l4 <= '1';
	nextstate <=allon;
	
end case;
end process;


end Behavioral;
